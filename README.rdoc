= hyperion

Hyperion is a lightning fast Ruby object model backed with Redis. It was created in 48 hours to back Leatherbound.me, a ebook comparison shopping tool that was built for Rails Rumble. We withstood 15,000 uniques on Monday morning, and Hyperion stayed super quick even with tons of concurrent queries on a small Linode.

== Key features

* Object -> Redis mapper, with indexes, validations, callbacks, and other magic.
* Indexing of objects on any attributes or collections of attributes.

== A token example
	
	adrian$ gem install hyperion
	
	require 'hyperion'
	
	class Person < Hyperion
		# First we set up the attributes on this object.
		attribute :name, :email, :password, :other_amazing_info, :car_color, :state
		
		# Let's use the email as our primary key.
		# Another option would be to not define our own, in which case :id will be created & used.
		hyperion_key :email
		
		# Lets add some indexes!
		# We can search for all Persons with a given name.
		hyperion_index :name
		
		# We can also search for all people with a given car color and state.
		hyperion_index [:car_color, :state]
	end

	p1 = Person.new({:name => 'Adrian Pike', :email => 'adrian@pikeapps.com', â€¦})
	p1.save
	
	Person.find('adrian@pikeapps.com') #=> #<Person @name="Adrian Pike", @email="adrian@pikeapps.com">
	Person.find(:all, :conditions => {:name => 'Adrian Pike'}) #=> [#<Person @name="Adrian Pike", @email="adrian@pikeapps.com">]
	Person.find(:first, :conditions => {:car_color => 'purple', :state => 'denial'}) #=> #<Person @name="Adrian Pike", @email="adrian@pikeapps.com">

== Requirements

* Ruby 1.9
* active_support
* Redis
* active_model if you want to use validations and callbacks.

== Issues
This is most certainly still beta software - most of the stuff under the hood is in active use, but I'm
the only one living on the edge gem right now. I'd love to see some other people using it and giving me
some feedback if it helps them, and feedback if it doesn't.

If you run into a bug, feel free to add an issue in the GitHub issue tracker.

== Roadmap/TODO

=== 0.2.0
* Schema versioning and migrations.

=== 0.3.0
* Clever auto-sharding based on primary keyspace
  * Figure out a way to auto-balance shards

=== 0.4.0
* Slow full-table searches.
* Ordering for queries

=== 0.5.0
* Faster faster faster! Let's utilize more of Redis' exposed data structures to make it better.

=== 1.0
* Migrate to ARel.

== Note on Patches/Pull Requests
 
* Fork the project.
* Make your feature addition or bug fix.
* Add tests for it. This is important so I don't break it in a
  future version unintentionally.
* Commit, do not mess with rakefile, version, or history.
  (if you want to have your own version, that's grand, but bump version in a commit by itself I can ignore when I pull)
* Send me a pull request. Bonus points for topic branches.

== Warranty
This software is provided "as is" and without any express or implied warranties, including, without limitation, the implied warranties of merchantibility and fitness for a particular purpose.

== Credits & Acknowledgements

I'm Adrian Pike (@adrianpike).
Amiel Martin's helped a *ton* with patches and development.

== Copyright

Copyright (c) 2010 Adrian Pike. See LICENSE for details.